// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String   @id @default(uuid())
  name      String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboards")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")

  @@index([name])
}

model Billboard {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId  String
  store    Store  @relation("StoreToBillboards", fields: [storeId], references: [id])
  label    String @unique
  imageUrl String

  categories Category[]

  @@index([storeId])
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  storeId  String
  store    Store     @relation("StoreToSize", fields: [storeId], references: [id])
  value    String
  products Product[]

  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  storeId  String
  store    Store     @relation("StoreToColor", fields: [storeId], references: [id])
  value    String
  products Product[]

  @@index([storeId])
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  price      Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  storeId    String
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  images     Image[]
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizeId     String
  size       Size     @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color    @relation(fields: [colorId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}
